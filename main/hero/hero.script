-- Gravity is 20 units/s²
local gravity = -20

-- Jump speed is 900 units/s²
local jump_takeoff_speed = 900

function init(self)
	-- Send input to on_input() in this script
	msg.post(".", "acquire_input_focus")

	-- Save starting position
	self.position = go.get_position()

	-- Initialize state
	self.velocity = vmath.vector3(0, 0, 0)
	self.ground_contact = false
end

function final(self)
	-- Return input focus
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	local gravity = vmath.vector3(0, gravity, 0)

	if not self.ground_contact then
		-- Apply gravity
		self.velocity = self.velocity + gravity
	end

	-- Apply velocity
	go.set_position(go.get_position() + self.velocity * dt)

	-- Reset volatile state
	self.correction = vmath.vector()
	self.ground_contact = false
end

local function handle_geometry_contact(self, normal, distance)
	-- Project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- Calculate the compensation
	local comp = (distance - proj) * normal
	-- Add this to the correction
	self.correction = self.correction + comp
	-- Apply the compensation
	go.set_position(go.get_position() + comp)
	-- Check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	-- Project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- If the projection is negative, the velocity points toward the contact point
	if proj < 0 then
		-- Remove that component
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		-- Check for contact point message
		if message.group == hash("geometry") then
			handle_geometry_contact(self, message.normal, message.distance)
		end
	end
end

local function jump(self)
	-- Only allow from ground
	if self.ground_contact then
		-- Take-off
		self.velocity.y = jump_takeoff_speed
	end
end

local function abort_jump(self)
	-- If still going up
	if self.velocity.y > 0 then
		-- Scale down the speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") or action_id == hash("touch") then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end

function on_reload(self)
end
